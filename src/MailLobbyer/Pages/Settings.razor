@page "/Settings"
@inject IConfiguration Configuration
@using System.IO
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Text
@using FileHandlerComponent
@using MailLobbyer.SettingsProfilesClass
@using MailLobbyer.CSVFileClass
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Settings</PageTitle>

    <form class="input-form" @onsubmit="SettingsFormSubmitHandler">
    <h1 class="page-title">Settings</h1>

    <div class="form-group">
        <label for="SettingsProfiles">Settings Profile:</label>
        <select id="SettingsProfiles" class="form-control" @bind="selectedsettingsprofile" aria-label="Settings profiles">
        <option value="@Guid.Empty">Select a profile</option>
        @foreach (SettingsProfiles profile in settingsprofilesonserver)
        {
            <option value="@profile.Id" aria-label="@profile.ProfileName">@profile.ProfileName | @profile.SenderName | @profile.SenderEmail | @profile.Username | @profile.Host | @profile.Port</option>
        }
        </select>
        <button type="button" class="btn btn-primary" @onclick="RemoveSelectedProfile">Remove</button>
    </div>  

    <div class="form-group">
        <label for="profilename">Profile name:</label>
        <input type="text" placeholder="Enter the profile name" id="profilename" name="profilename" class="form-control" @bind="profilename" aria-label="Profile name" />
    </div>

    <div class="form-group">
        <label for="sendername">Sender name:</label>
        <input type="text" placeholder="Enter your sender name" id="sendername" name="sendername" class="form-control" @bind="sendername" aria-label="Sender name" />
    </div>

    <div class="form-group">
        <label for="senderemail">Sender email:</label>
        <input type="email" placeholder="Enter your sender email" id="senderemail" name="senderemail" class="form-control" @bind="senderemail" aria-label="Sender email" />
    </div>

    <div class="form-group">
        <label for="username">SMTP username:</label>
        <input type="text" placeholder="Enter your SMTP username" id="username" name="username" class="form-control" @bind="username" aria-label="SMTP username" />
    </div>

    <div class="form-group">
        <label for="password">SMTP password:</label>
        <input type="password" placeholder="Enter your SMTP password" id="password" name="password" class="form-control" @bind="password" aria-label="SMTP password" />
    </div>

    <div class="form-group">
        <label for="host">SMTP host:</label>
        <input type="text" placeholder="Enter your SMTP hostname/IP" id="host" name="host" class="form-control" @bind="host" aria-label="SMTP host" />
    </div>

    <div class="form-group">
        <label for="port">SMTP port:</label>
        <input type="text" placeholder="Enter your SMTP port" id="port" name="port" class="form-control" @bind="port" aria-label="SMTP port" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    </form>

<div class="input-form">
    <div class="form-group">
        <label for="inputfiles">Upload CSV contact groups:</label>
            <div class="custom-inputfile">
                <InputFile id="inputfiles" OnChange="@FileUploadHandler" accept=".csv, .txt" multiple />
            </div>
            <div class="inputfile-form">
                <input type="button" class="btn btn-primary"value="Browse..." onclick="document.getElementById('inputfiles').click();" />
                @foreach (var file in selectedfiles)
                {
                    <div class="selectedfile-container">
                        <button type="button" id="file" class="btn-selectedfile" @onclick="() => RemoveFile(file)">@file.Name  X</button>
                    </div>
            
                }
            </div>
    </div>

    @if(selectedfiles.Count > 0)
    {
        <button type="button" @onclick="UploadCSVFile" class="btn btn-primary">Upload</button>
    }
    else
    {
        <button type="button" @onclick="UploadCSVFile" disabled class="btn btn-primary">Upload</button>
    }
      
    <div class="form-group">
        <label for="inputfiles">Remove CSV files on server:</label>
        <select id="inputfiles" class="form-control" @bind="selectedcsvfilename" required aria-label="CSV files">
            <option value="">Select a file</option>
            @foreach (CSVFile csvfile in csvfilesonserver)
            {
                <option value="@csvfile.Filename" aria-label="@csvfile.Filename">@csvfile.Filename</option>
            }
        </select>
    </div>

    @if(selectedcsvfilename != null)
    {
        <button type="button" @onclick="RemoveCSVFile" class="btn btn-primary">Delete</button>
    }
    else
    {
        <button type="button" @onclick="RemoveCSVFile" disabled class="btn btn-primary">Delete</button>
    } 
</div>

@code {
    private HubConnection? settingshubconnection;
    private HubConnection? csvhubconnection;
    private List<CSVFile> csvfilesonserver = new List<CSVFile>();
    private List<SettingsProfiles> settingsprofilesonserver = new List<SettingsProfiles>();
    private List<IBrowserFile> selectedfiles = new List<IBrowserFile>();
    
    private Guid selectedsettingsprofile;
    private string selectedcsvfilename;
    private string profilename;
    private string sendername;
    private string senderemail;
    private string username;
    private string password;
    private string host;
    private int port;
    
    protected override async Task OnInitializedAsync()
    {
        settingshubconnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/settingshub"))
            .Build();
        
        csvhubconnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/csvhub"))
            .Build();
            

        await settingshubconnection.StartAsync();
        await csvhubconnection.StartAsync();
        

        if (settingshubconnection is not null)
        {
            await settingshubconnection.SendAsync("SettingsProfilesSeeker");
            // Replace with profiles reading when implemented.
            // await csvhubconnection.SendAsync("CSVFileSeeker");


            settingsprofilesonserver = await settingshubconnection.InvokeAsync<List<SettingsProfiles>>("GetProfiles");
        }

        if (csvhubconnection is not null)
        {
            await csvhubconnection.SendAsync("CSVFileSeeker");


            csvfilesonserver = await csvhubconnection.InvokeAsync<List<CSVFile>>("GetCSVFilesInMemory");
        }
    }

    private void RemoveSelectedProfile()
    {
        settingshubconnection.SendAsync("RemoveSettingsProfile", selectedsettingsprofile);
    }

    private async Task SettingsFormSubmitHandler()
    {
        settingshubconnection.SendAsync("AddSettingProfile", profilename, sendername, senderemail, username, password, host, port);

        selectedsettingsprofile = Guid.Empty;
        sendername = string.Empty;
        senderemail = string.Empty;
        username = string.Empty;
        password = string.Empty;
        host = string.Empty;

        await JSRuntime.InvokeVoidAsync("eval","location.reload(true)");
        
        
    }

    private void FileUploadHandler(InputFileChangeEventArgs e)
    {
        selectedfiles = e.GetMultipleFiles().ToList();
    }

    private void RemoveFile(IBrowserFile file)
    {
        selectedfiles.Remove(file);

    }
    
    private async Task UploadCSVFile()
    {
        foreach (IBrowserFile file in selectedfiles)
        {
            await csvhubconnection.SendAsync("CSVFilesToUpload", file);
        }

        await JSRuntime.InvokeVoidAsync("eval","location.reload(true)");
        
    }

    private async Task RemoveCSVFile()
    {
        await csvhubconnection.SendAsync("RemoveCSVFile", selectedcsvfilename);

        await JSRuntime.InvokeVoidAsync("eval","location.reload(true)");
    }
    

    public async ValueTask DisposeAsync()
    {
        if (settingshubconnection is not null)
        {
            await settingshubconnection.DisposeAsync();
            settingsprofilesonserver.Clear();
        }

        if (csvhubconnection is not null)
        {
            await csvhubconnection.DisposeAsync();
        }
    }
    
}
