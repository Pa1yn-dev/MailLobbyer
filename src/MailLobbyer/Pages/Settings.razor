@page "/Settings"
@inject IConfiguration Configuration
@using System.IO
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Text
@using FileHandlerComponent

<PageTitle>Settings</PageTitle>

<h1 class="page-title">Settings</h1>

<form class="input-form" @onsubmit="SettingsFormSubmitHandler">
    <div class="form-group">
        <label for="sendername">Sender name:</label>
        <input type="text" value="@smtpclisettings.Sendername" id="sendername" name="sendername" class="form-control" @oninput="UpdateSendername" aria-label="Sender name" />
    </div>

    <div class="form-group">
        <label for="senderemail">Sender email:</label>
        <input type="email" value="@smtpclisettings.Senderemail" id="senderemail" name="senderemail" class="form-control" @oninput="UpdateSenderemail" aria-label="Sender email" />
    </div>

    <div class="form-group">
        <label for="username">SMTP username:</label>
        <input type="text" value="@smtpclisettings.Username" id="username" name="username" class="form-control" @oninput="UpdateUsername" aria-label="SMTP username" />
    </div>

    <div class="form-group">
        <label for="password">SMTP password:</label>
        <input type="password" value="@smtpclisettings.Password" id="password" name="password" class="form-control" @oninput="UpdatePassword" aria-label="SMTP password" />
    </div>

    <div class="form-group">
        <label for="host">SMTP host:</label>
        <input type="text" value="@smtpclisettings.Host" id="host" name="host" class="form-control" @oninput="UpdateHost" aria-label="SMTP host" />
    </div>

    <div class="form-group">
        <label for="port">SMTP port:</label>
        <input type="text" value="@smtpclisettings.Port" id="port" name="port" class="form-control" @oninput="UpdatePort" aria-label="SMTP port" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</form>


<form class="input-form" @onsubmit="CSVFileFormSubmitHandler">
    <div class="form-group">
        <label for="inputfiles">Upload CSV contact groups:</label>
            <div class="custom-inputfile">
                <InputFile id="inputfiles" OnChange="@FileUploadHandler" multiple />
            </div>
    </div>

    <div class="form-group">


    </div>

    <button type="submit" class="btn btn-primary">Upload</button>
</form>


@code {
    private SmtpClientSettingsComponent.SmtpClientSettings smtpclisettings = new SmtpClientSettingsComponent.SmtpClientSettings();
    private List<IBrowserFile> selectedfiles = new List<IBrowserFile>();

    protected override void OnInitialized()
    {
        Configuration.Bind("SmtpClientSettings", smtpclisettings);
    }

    private void UpdateSendername(ChangeEventArgs e)
    {
        smtpclisettings.Sendername = e.Value.ToString();
    }

    private void UpdateSenderemail(ChangeEventArgs e)
    {
        smtpclisettings.Senderemail = e.Value.ToString();
    }

    private void UpdateUsername(ChangeEventArgs e)
    {
        smtpclisettings.Username = e.Value.ToString();
    }

    private void UpdatePassword(ChangeEventArgs e)
    {
        smtpclisettings.Password = e.Value.ToString();
    }

    private void UpdateHost(ChangeEventArgs e)
    {
        smtpclisettings.Host = e.Value.ToString();
    }

    private void UpdatePort(ChangeEventArgs e)
    {
        smtpclisettings.Port = int.Parse(e.Value.ToString());
    }

    private async Task SettingsFormSubmitHandler()
    {
        var builder = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);

        Configuration = builder.Build();
        
        // Update the values in memory
        Configuration["SmtpClientSettings:Sendername"] = smtpclisettings.Sendername;
        Configuration["SmtpClientSettings:Senderemail"] = smtpclisettings.Senderemail;
        Configuration["SmtpClientSettings:Username"] = smtpclisettings.Username;
        Configuration["SmtpClientSettings:Password"] = smtpclisettings.Password;
        Configuration["SmtpClientSettings:Host"] = smtpclisettings.Host;
        Configuration["SmtpClientSettings:Port"] = smtpclisettings.Port.ToString();
        

        
    
        JObject existingobj = JObject.Parse(File.ReadAllText(Path.Combine(Directory.GetCurrentDirectory(), "appsettings.json")));
        JObject blockformodification = (JObject)existingobj["SmtpClientSettings"];

        blockformodification["Sendername"] = Configuration["SmtpClientSettings:Sendername"];
        blockformodification["Senderemail"] = Configuration["SmtpClientSettings:Senderemail"];
        blockformodification["Username"] = Configuration["SmtpClientSettings:Username"];
        blockformodification["Password"] = Configuration["SmtpClientSettings:Password"];
        blockformodification["Host"] = Configuration["SmtpClientSettings:Host"];
        blockformodification["Port"] = Configuration["SmtpClientSettings:Port"];

        using (StreamWriter writer = File.CreateText(Path.Combine(Directory.GetCurrentDirectory(), "appsettings.json")))
        using (JsonTextWriter jsontxtwriter = new JsonTextWriter(writer))
        {
            jsontxtwriter.Formatting = Formatting.Indented;
            existingobj.WriteTo(jsontxtwriter);
        }

    

    }

    private void FileUploadHandler(InputFileChangeEventArgs e)
    {
        selectedfiles = e.GetMultipleFiles().ToList();
    }

    
    private async Task CSVFileFormSubmitHandler()
    {
        FileHandler filehandlerinstance = new FileHandler();

        await filehandlerinstance.ExtractUploadedFileContents(selectedfiles);
    }
    
}

