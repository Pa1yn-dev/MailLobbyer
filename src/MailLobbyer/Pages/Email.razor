@page "/"
@using MailLobbyer.CSVServiceComponent
@using MailLobbyer.EmailHandlerComponent
@using MailLobbyer.FileHandlerComponent
@using MailLobbyer.CSVFileClass
@using MailLobbyer.ContactClass
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Email</PageTitle>

<form class="input-form" @onsubmit="EmailFormSubmitHandler">
    <h1 class="page-title">Email</h1>
    <div class="form-group">
        <label for="subject">Subject:</label>
        <input type="text" placeholder="Enter your email subject" id="subject" class="form-control" @bind="subject" aria-label="Subject" />
    </div>

    <div class="form-group">
        <label for="body">Body:</label>
        <textarea id="body" placeholder="Enter your email body" class="form-control" @bind="body" aria-label="Body"></textarea>
    </div>

    <div class="custom-inputfile">
        <InputFile id="inputfiles" OnChange="@FileUploadHandler" style="display: none;" multiple />
    </div>

    <div class="inputfile-form">
        <input type="button" class="btn btn-primary"value="Browse..." onclick="document.getElementById('inputfiles').click();" />
        @foreach (var file in selectedfiles)
        {
            <div class="selectedfile-container">
                <button type="button" id="file" class="btn-selectedfile" @onclick="() => RemoveFile(file)">@file.Name  X</button>
            </div>
            
        }
    </div>
        

    
    @if (displayform)
    {
        <div class="form-group">
        <label for="contactGroup">Contact Group:</label>
        <select id="contactGroup" class="form-control" @bind="selectedgroup" required aria-label="Contact Group">
            <option value="">Select a group</option>
            @foreach (CSVFile csvfile in csvfilesonserver)
            {
                <option value="@csvfile.Filepath" aria-label="@csvfile.Filename">@csvfile.Filename</option>
            }
        </select>
        </div>

        <button type="submit" class="btn btn-primary">Continue</button>
    }     
</form>

    @if (!displayform)
    {
        <form class="input-form" @onsubmit="ExclusionFormSubmitHandler">
            <h1 class="page-title">Contact exclusion</h1>
            <div class="form-group">
                <input type="text" placeholder="Enter a contact to search for" class="form-control" @oninput="OnContactSearch" aria-label="Contact Search" />
                <button type="button" class="btn btn-primary" disabled="@istoggleselectallbuttondisabled" @onclick="ToggleSelectAll">@toggleselectallbuttonstringvalue</button>
                @if (displaycontactsearch)
                {
                    @foreach (Contact contact in csvserviceinstance.contacts)
                    {
                        @if (contact.IsSearched == true)
                        {
                            <div class="subform-group">
                                <label for="excludecontacts">@string.Concat(contact.Forename, " ", contact.Surname) - @contact.Email</label>
                                <input type="checkbox" id="excludecontacts" value="@contact.Email" checked="@contact.IsSelected" @onchange="() => ToggleContactExclusion(contact)" aria-label="Exclude contact: @(string.Concat(contact.Forename, " ", contact.Surname) + " - " + contact.Email)" />
                            </div>

                        }
                    }
                }

                else 
                {
                    @foreach (Contact contact in csvserviceinstance.contacts)
                    {
                        <div class="subform-group">
                            <label for="excludecontacts">@string.Concat(contact.Forename, " ", contact.Surname) - @contact.Email</label>
                            <input type="checkbox" id="excludecontacts" value="@contact.Email" checked="@contact.IsSelected" @onchange="() => ToggleContactExclusion(contact)" aria-label="Exclude contact: @(string.Concat(contact.Forename, " ", contact.Surname) + " - " + contact.Email)" />
                        </div>
                    }
                    
                }

            </div>

            <button type="submit" class="btn btn-primary">Send</button>
        </form>
    }

@code {
    private HubConnection? hubConnection;
    private List<CSVFile> csvfilesonserver = new List<CSVFile>();


    private bool displayform = true;
    private string subject;
    private string body;
    private List<IBrowserFile> selectedfiles = new List<IBrowserFile>();
    private string selectedgroup;
    private string contactsearch = string.Empty;
    private bool displaycontactsearch;
    private bool istoggleselectallbuttondisabled;
    private bool toggleselectallbuttonboolvalue = true;
    private string toggleselectallbuttonstringvalue = "Select all";
    

    CSVService csvserviceinstance = new CSVService();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/csvhub"))
            .Build();

        

        await hubConnection.StartAsync();

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("CSVFileSeeker");


            csvfilesonserver = await hubConnection.InvokeAsync<List<CSVFile>>("GetCSVFilesInMemory");
        }
    }

    private void FileUploadHandler(InputFileChangeEventArgs e)
    {
        selectedfiles.AddRange(e.GetMultipleFiles());
    }

    private void RemoveFile(IBrowserFile file)
    {
        selectedfiles.Remove(file);

    }

    private void OnContactSearch(ChangeEventArgs e)
    {
        contactsearch = e.Value.ToString();
        displaycontactsearch = !string.IsNullOrEmpty(contactsearch);

        if (displaycontactsearch == true)
        {
            istoggleselectallbuttondisabled = true; 
        }

        else
        {
            istoggleselectallbuttondisabled = false; 
        }

        foreach(Contact contact in csvserviceinstance.contacts)
        {
            contact.IsSearched = !string.IsNullOrEmpty(contactsearch) &&
            (contact.Email.Contains(contactsearch, StringComparison.OrdinalIgnoreCase) == true ||
             contact.Forename.Contains(contactsearch, StringComparison.OrdinalIgnoreCase) == true ||
             contact.Surname.Contains(contactsearch, StringComparison.OrdinalIgnoreCase) == true);

        }
    }

    private void ToggleSelectAll()
    {
        toggleselectallbuttonboolvalue = !toggleselectallbuttonboolvalue;

        if(!toggleselectallbuttonboolvalue)
        {
            toggleselectallbuttonstringvalue = "Deselect all";
        }
        
        else
        {
            toggleselectallbuttonstringvalue = "Select all";
        }

        foreach (Contact contact in csvserviceinstance.contacts)
        {
            contact.IsSelected = !contact.IsSelected;
        }
    }

    private void ToggleContactExclusion(Contact contact)
    {
        contact.IsSelected = !contact.IsSelected;
    }

    private async Task EmailFormSubmitHandler()
    {
        if (string.IsNullOrEmpty(selectedgroup))
        {
            // Replace with popup!
            Console.WriteLine("Please select a group.");
            return;
        }

        await csvserviceinstance.CSVParser(selectedgroup);

        displayform = false;
    }

    private async Task ExclusionFormSubmitHandler()
    {
        IConfiguration configuration = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json")
            .Build();

        EmailHandler emailhandlerinstance = new EmailHandler(configuration);
        FileHandler filehandlerinstance = new FileHandler();

        await filehandlerinstance.ExtractUploadedFileContents(selectedfiles);

        foreach (Contact contact in csvserviceinstance.contacts)
        {
            if (!contact.IsSelected == true)
            {
                await emailhandlerinstance.EmailSyntaxHandler(subject, body, contact, filehandlerinstance.fileuploads);
            }
        }

        // Reset form fields
        subject = string.Empty;
        body = string.Empty;
        selectedfiles = new List<IBrowserFile>();
        csvserviceinstance.contacts.Clear();
        selectedgroup = string.Empty;
        toggleselectallbuttonboolvalue = true;
        toggleselectallbuttonstringvalue = "Select all";
        displayform = true;
    }



    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
