@page "/"
@using MailLobbyer.CSVServiceComponent
@using MailLobbyer.CSVFileClass
@using MailLobbyer.ContactClass

<PageTitle>Index</PageTitle>

<h1 class="page-title">Home</h1>

<form @onsubmit="FormSubmitHandler">
    <div class="form-group">
        <label for="subject">Subject:</label>
        <input type="text" id="subject" class="form-control" @bind="subject" />
    </div>

    <div class="form-group">
        <label for="body">Body:</label>
        <textarea id="body" class="form-control" @bind="body"></textarea>
    </div>

    <div class="form-group">
        <label>Exclude:</label>
        <input type="text" id="exclude" class="form-control" @bind="exclude" />
    </div>

    <div class="form-group">
        <label for="contactGroup">Contact Group:</label>
        <select id="contactGroup" class="form-control" @bind="selectedgroup" required>
            <option value="">Select a group</option>
    @foreach (CSVFile csvfile in csvserviceinstance.CSVFilesindir)
    {
        <option value="@csvfile.Filepath">@csvfile.Filename</option>
    }
</select>
    </div>

    <button type="submit" class="btn btn-primary">Send</button>
</form>

@code {

    private string subject;
    private string body;
    private string? exclude;
    private string selectedgroup;
    CSVService csvserviceinstance = new CSVService();

    protected override void OnInitialized()
    {
        //Checks for a folder for CSV files for contact groups in easy to access locations on both Linux and Windows, if it does not exist a folder is created.
        string documentspath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
        string directoryname = "MailLobbyer";
        string directorypath = Path.Combine(documentspath, directoryname);

        if (!Directory.Exists(directorypath))
        {
        Directory.CreateDirectory(directorypath);
        Console.WriteLine("CSV contact-grouping directory created successfully.");
        }
        else
        {
            Console.WriteLine("CSV contact-grouping directory already exists.");
        }

        
        csvserviceinstance.CSVFileSeeker(directorypath);
    }

    private async Task FormSubmitHandler()
    {
        if (string.IsNullOrEmpty(selectedgroup))
        {
            // Replace with popup!
            Console.WriteLine("Please select a group.");
            return;
        }

        await csvserviceinstance.CSVParser(selectedgroup);

        IConfiguration configuration = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json")
            .Build();

        EmailHandlerComponent.EmailHandler emailHandler = new EmailHandlerComponent.EmailHandler(configuration);
        

        foreach (Contact contact in csvserviceinstance.contacts)
        {
            await emailHandler.SendEmailAsync(string.Concat(contact.Forename, "", contact.Surname),contact.Email, subject, body);
        }
    }

}